import scipy.stats as stats
import random

def single_year_simulation(dist_geburtenRate, dist_todesRaten, dist_einwanderung, dist_auswanderung, startValue, years):
    def generateDistribution_rvs(distr_type_params, pop_start, current_pop, sample_size=10000):
        """
        generate rvs from distribution

        params:
        distr_type_params: distribution parameters from fitter
        pop_start: start population size
        current_pop: current population size
        sample_size: number of values generated by rvs function
        """
        
        key = list(distr_type_params.keys())[0] #gebe verteilungsname
        params = distr_type_params[key].copy() #kopiere parameter

        var = params["scale"] / params["loc"] #variationskoeffizient berechnen

        params["loc"] = (params["loc"] / pop_start) * current_pop #neuer erwartungswert berechnen
        
        params["scale"] = var * params["loc"] #neue standardabweicung berechnen

        obj = getattr(stats, key) #gebe stats objekt

        dist_vals = obj.rvs(size=sample_size, **params) #generiere 'sample_size' werte, welche die verteilung abbilden
    
        return dist_vals

    valuesYear = [startValue]

    for year in range(years): #iteriere über n jahre
        birthed =  random.choice(generateDistribution_rvs(dist_geburtenRate, startValue, valuesYear[-1])) #zufällige geburtenrate
        dead = random.choice(generateDistribution_rvs(dist_todesRaten, startValue, valuesYear[-1])) #zufällige todesrate
        eingewandert = random.choice(generateDistribution_rvs(dist_einwanderung, startValue, valuesYear[-1])) #zufällige einwanderungsrate
        ausgewandert = random.choice(generateDistribution_rvs(dist_auswanderung, startValue, valuesYear[-1])) #zufällige auswanderungsrate

        newValue = valuesYear[-1] + birthed - dead + eingewandert - ausgewandert #simulationsgleichung
        valuesYear.append(newValue)

    return valuesYear